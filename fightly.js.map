{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 1c8225602acf9f27662d","webpack:///./lib/fightly.js","webpack:///./~/ensy/entity-manager.js","webpack:///./~/events/events.js","webpack:///./lib/actions.js","webpack:///./lib/engine.js","webpack:///./lib/network.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACtCA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AAEA,UAAS,iBAAT,GAA6B;AACzB,SAAI,UAAU,sBAAd;AACA,SAAI,UAAU,sBAAY,OAAZ,CAAd;AACA,SAAI,SAAS,qBAAW,OAAX,EAAoB,OAApB,CAAb;AACA,SAAI,UAAU,oBAAd;AACA,SAAI,UAAU,uBAAe,OAAf,CAAd;;AAEA,aAAQ,OAAR,GAAkB,OAAlB;AACA,aAAQ,OAAR,GAAkB,OAAlB;AACA,aAAQ,OAAR,GAAkB,OAAlB;;AAEA,YAAO,cAAP,CAAsB,OAAtB,EAA+B,OAA/B,EAAwC;AACpC,cAAK,eAAY;AACb,oBAAO,OAAO,KAAd;AACH;AAHmC,MAAxC;;AAMA,YAAO,OAAP;AACH;;mBAEc,iB;;;;;;AC3Bf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,8CAA6C,SAAS;AACtD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAkC;AAClC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,IAAI;AACpB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,iBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,IAAI;AACnB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,gBAAe,IAAI;AACnB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAqC;AACrC;AACA;AACA;AACA;AACA,kCAAiC;AACjC,8BAA6B;AAC7B;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,MAAM;AACrB,gBAAe,IAAI;AACnB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,0CAAyC,QAAQ;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAe,IAAI;AACnB,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,IAAI;AACnB,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,IAAI;AACnB,gBAAe,OAAO;AACtB,iBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,OAAO;AACtB,iBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gBAAe,IAAI;AACnB,iBAAgB,OAAO;AACvB;AACA;AACA,wBAAuB,4BAA4B;AACnD;AACA;AACA;AACA;;AAEA;AACA,EAAC;;;;;;;ACneD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAiB;AACjB,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA,gBAAe,SAAS;AACxB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,IAAG;AACH,qBAAoB,SAAS;AAC7B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,IAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;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","file":"fightly.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"fightly\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"fightly\"] = factory();\n\telse\n\t\troot[\"fightly\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 1c8225602acf9f27662d\n **/","import EntityManager from 'ensy';\nimport EventEmitter from 'events';\n\nimport ActionsFactory from './actions';\nimport Engine from './engine';\nimport Network from './network';\n\nfunction createApplication() {\n    var emitter = new EventEmitter();\n    var network = new Network(emitter);\n    var engine = new Engine(emitter, network);\n    var manager = new EntityManager();\n    var actions = ActionsFactory(network);\n\n    emitter.manager = manager;\n    emitter.network = network;\n    emitter.actions = actions;\n\n    Object.defineProperty(emitter, 'games', {\n        get: function () {\n            return engine.games;\n        }\n    });\n\n    return emitter;\n}\n\nexport default createApplication;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/fightly.js\n **/","/*!\n * ensy - Entity System JavaScript Library v1.2.0\n *\n * A JavaScript implementation of the Entity System model as described by\n * Adam Martin in http://t-machine.org/index.php/2009/10/26/entity-systems-are-the-future-of-mmos-part-5/\n *\n * @author Adrian Gaudebert - adrian@gaudebert.fr\n * @license MIT license.\n *\n */\n\n// for compatibility with node.js and require.js\nif (typeof define !== 'function') {\n    var define = require('amdefine')(module)\n}\n\ndefine(function () {\n\n    /*!\n     * Return a clone of an object.\n     * From https://stackoverflow.com/questions/728360\n     */\n    function clone(obj) {\n        // Handle the 3 simple types, and null or undefined\n        if (null == obj || \"object\" != typeof obj) return obj;\n\n        // Handle Date\n        if (obj instanceof Date) {\n            var copy = new Date();\n            copy.setTime(obj.getTime());\n            return copy;\n        }\n\n        // Handle Array\n        if (obj instanceof Array) {\n            var copy = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                copy[i] = clone(obj[i]);\n            }\n            return copy;\n        }\n\n        // Handle Object\n        if (obj instanceof Object) {\n            var copy = {};\n            for (var attr in obj) {\n                if (obj.hasOwnProperty(attr)) copy[attr] = clone(obj[attr]);\n            }\n            return copy;\n        }\n    }\n\n    /*!\n     * Return true if the parameter is a function.\n     * From https://stackoverflow.com/questions/5999998\n     */\n    function isFunction(thingToCheck) {\n        return thingToCheck && ({}).toString.call(thingToCheck) === '[object Function]';\n    }\n\n    /**\n     * @class EntityManager\n     *\n     * Implement the Entity System model and provide tools to easily\n     * create and manipulate Entities, Components and Processors.\n     */\n    var EntityManager = function (listener) {\n        this.listener = null;\n        if (listener && isFunction(listener.emit)) {\n            this.listener = listener;\n        }\n\n        // A list of entity IDs, each being a simple integer.\n        this.entities = [];\n\n        // A dictionary of components, where keys are the name of each\n        // component. Components are objects containing:\n        //  * metadata (name, description)\n        //  * the initial set of data that defines the default state of a\n        //    newly instanciated component\n        this.components = {};\n\n        // A dictionary of assemblages, where keys are the name of each\n        // assemblage. Assemblages are objects containing:\n        //  * metadata (name, description)\n        //  * a list of components to add to the entity\n        //  * an initial state for some components, to override the defaults\n        this.assemblages = {};\n\n        /*!\n         * A relational-like list of entity states. There is one line for\n         * each entity - component association.\n         *\n         * To optimize the access time to this data, it is stored in a\n         * dictionary of dictionaries of this form:\n         * {\n         *   \"componentId\": {\n         *     \"entityId\": {\n         *       ...\n         *       here comes the state of this entity for this component\n         *       ...\n         *     }\n         *   }\n         * }\n         *\n         * This way, getting the data of one entity for one component is:\n         *   this.entityComponentData[componentId][entityId]\n         * and getting all entities for one component is:\n         *   this.entityComponentData[componentId]\n         */\n        this.entityComponentData = {};\n\n        // The ordered list of processors known by this manager.\n        this.processors = [];\n\n        // The next unique identifier.\n        this.uid = 0;\n    };\n\n    /**\n     * Return an identifier unique to this system.\n     *\n     * @return {int} - Unique identifier.\n     */\n    EntityManager.prototype.getUid = function () {\n        return this.uid++;\n    };\n\n    //=========================================================================\n    // ENTITIES\n\n    /**\n     * Create a new entity in the system by creating a new instance of each of\n     * its components.\n     *\n     * @param {array} componentIds - List of identifiers of the components that compose the new entity.\n     * @return {int} - Unique identifier of the new entity.\n     */\n    EntityManager.prototype.createEntity = function (componentIds) {\n        var id = this.getUid();\n        this.addComponentsToEntity(componentIds, id);\n        this.entities.push(id);\n        return id;\n    };\n\n    /**\n     * Remove an entity and its instanciated components from the system.\n     *\n     * @param {int} id - Unique identifier of the entity.\n     * @return {object} - this\n     */\n    EntityManager.prototype.removeEntity = function (id) {\n        // Remove all data for this entity.\n        for (var comp in this.entityComponentData) {\n            if (this.entityComponentData.hasOwnProperty(comp)) {\n                if (this.entityComponentData[comp][id]) {\n                    delete this.entityComponentData[comp][id];\n                }\n            }\n        }\n\n        // Remove the entity from the list of known entities.\n        this.entities.splice(this.entities.indexOf(id), 1);\n\n        return this;\n    };\n\n    //=========================================================================\n    // COMPONENTS\n\n    /**\n     * Add a component to the list of known components.\n     *\n     * @param {string} id - Unique identifier of the component.\n     * @param {object} component - Object containing the metadata and data of the component.\n     * @return {object} - this\n     */\n    EntityManager.prototype.addComponent = function (id, component) {\n        this.components[id] = component;\n        return this;\n    };\n\n    /**\n     * Remove a component from the list of known components.\n     *\n     * @param {string} id - Unique identifier of the component.\n     * @return {object} - this\n     */\n    EntityManager.prototype.removeComponent = function (id) {\n        delete this.components[id];\n        delete this.entityComponentData[id];\n        return this;\n    };\n\n    /**\n     * Get the list of components this instance knows.\n     *\n     * @return {array} - List of names of components.\n     */\n    EntityManager.prototype.getComponentsList = function () {\n        return Object.keys(this.components);\n    };\n\n    /**\n     * Create a new instance of each listed component and associate them\n     * with the entity.\n     *\n     * @param {array} componentIds - List of identifiers of the components to add to the entity.\n     * @param {int} entityId - Unique identifier of the entity.\n     * @return {object} - this\n     */\n    EntityManager.prototype.addComponentsToEntity = function (componentIds, entityId) {\n        var i;\n        var comp;\n        var self = this;\n\n        // First verify that all the components exist, and throw an error\n        // if any is unknown.\n        for (i = componentIds.length - 1; i >= 0; i--) {\n            comp = componentIds[i];\n\n            if (!this.components[comp]) {\n                throw new Error('Trying to use unknown component: ' + comp);\n            }\n        }\n\n        // Now we know that this request is correct, let's create the new\n        // entity and instanciate the component's states.\n        for (i = componentIds.length - 1; i >= 0; i--) {\n            comp = componentIds[i];\n\n            if (!this.entityComponentData[comp]) {\n                this.entityComponentData[comp] = {};\n            }\n\n            var newCompState = null;\n\n            // If the manager has a listener, we want to create getters\n            // and setters so that we can emit state changes. But if it does\n            // not have one, there is no need to add the overhead.\n            if (self.listener) {\n                newCompState = {};\n                (function (newCompState) {\n                    var state = clone(self.components[comp].state);\n\n                    // Create a setter for each state attribute, so we can emit an\n                    // event whenever the state of this component changes.\n                    for (var property in state) {\n                        if (state.hasOwnProperty(property)) {\n                            (function (property) {\n                                Object.defineProperty(newCompState, property, {\n                                    get: function () {\n                                        return state[property];\n                                    },\n                                    set: function (val) {\n                                        state[property] = val;\n                                        self.listener.emit('entityComponentUpdated', entityId, comp);\n                                    }\n                                });\n                            })(property);\n                        }\n                    }\n                })(newCompState);\n            }\n            else {\n                newCompState = clone(self.components[comp].state);\n            }\n\n            // Store the entity's ID so it's easier to find other components for that entity.\n            newCompState.__id = entityId;\n\n            this.entityComponentData[comp][entityId] = newCompState;\n        }\n\n        return this;\n    };\n\n    /**\n     * De-associate a list of components from the entity.\n     *\n     * @param {array} componentIds - List of identifiers of the components to remove from the entity.\n     * @param {int} entityId - Unique identifier of the entity.\n     * @return {object} - this\n     */\n    EntityManager.prototype.removeComponentsFromEntity = function (componentIds, entityId) {\n        var i;\n        var comp;\n\n        // First verify that all the components exist, and throw an error\n        // if any is unknown.\n        for (i = componentIds.length - 1; i >= 0; i--) {\n            comp = componentIds[i];\n\n            if (!this.components[comp]) {\n                throw new Error('Trying to use unknown component: ' + comp);\n            }\n        }\n\n        // Now we know that this request is correct, let's create the new\n        // entity and instanciate the component's states.\n        for (i = componentIds.length - 1; i >= 0; i--) {\n            comp = componentIds[i];\n\n            if (this.entityComponentData[comp]) {\n                if (this.entityComponentData[comp][entityId]) {\n                    delete this.entityComponentData[comp][entityId];\n                }\n            }\n        }\n\n\n        return this;\n    };\n\n    /**\n     * Return a reference to an object that contains the data of an\n     * instanciated component of an entity.\n     *\n     * @param {int} entityId - Unique identifier of the entity.\n     * @param {string} componentId - Unique identifier of the component.\n     * @return {object} - Component data of one entity.\n     */\n    EntityManager.prototype.getComponentDataForEntity = function (componentId, entityId) {\n        if (!(componentId in this.components)) {\n            throw new Error('Trying to use unknown component: ' + componentId);\n        }\n\n        if (\n            !this.entityComponentData.hasOwnProperty(componentId) ||\n            !this.entityComponentData[componentId].hasOwnProperty(entityId)\n        ) {\n            throw new Error('No data for component ' + componentId + ' and entity ' + entityId);\n        }\n\n        return this.entityComponentData[componentId][entityId];\n    };\n\n    /**\n     * Update the state of a component, many keys at once.\n     *\n     * @param {int} entityId - Unique identifier of the entity.\n     * @param {string} componentId - Unique identifier of the component.\n     * @param {object} newState - Object containing the new state to apply.\n     * @return {object} - this\n     */\n    EntityManager.prototype.updateComponentDataForEntity = function (componentId, entityId, newState) {\n        var compState = this.getComponentDataForEntity(componentId, entityId);\n\n        for (var key in newState) {\n            if (newState.hasOwnProperty(key) && compState.hasOwnProperty(key)) {\n                compState[key] = newState[key];\n            }\n        }\n\n        return this;\n    };\n\n    /**\n     * Return a list of objects containing the data of all of a given component.\n     *\n     * @param {string} componentId - Unique identifier of the component.\n     * @return {array} - List of component data for one component.\n     */\n    EntityManager.prototype.getComponentsData = function (componentId) {\n        if (!(componentId in this.components)) {\n            throw new Error('Trying to use unknown component: ' + componentId);\n        }\n\n        if (!this.entityComponentData.hasOwnProperty(componentId)) {\n            return [];\n        }\n\n        return this.entityComponentData[componentId];\n    };\n\n    /**\n     * Return true if the entity has the component.\n     *\n     * @param {int} entityId - Unique identifier of the entity.\n     * @param {string} componentId - Unique identifier of the component.\n     * @return {boolean} - True if the entity has the component.\n     */\n    EntityManager.prototype.entityHasComponent = function (entityId, componentId) {\n        if (!(componentId in this.components)) {\n            throw new Error('Trying to use unknown component: ' + componentId);\n        }\n\n        return (\n            this.entityComponentData.hasOwnProperty(componentId) &&\n            this.entityComponentData[componentId].hasOwnProperty(entityId)\n        );\n    };\n\n    //=========================================================================\n    // ASSEMBLAGES\n\n    /**\n     * Add an assemblage to the list of known assemblages.\n     *\n     * @param {string} id - Unique identifier of the assemblage.\n     * @param {object} assemblage - An instance of an assemblage to add.\n     * @return {object} - this\n     */\n    EntityManager.prototype.addAssemblage = function (id, assemblage) {\n        this.assemblages[id] = assemblage;\n        return this;\n    };\n\n    /**\n     * Remove an assemblage from the list of known assemblages.\n     *\n     * @param {string} id - Unique identifier of the assemblage.\n     * @return {object} - this\n     */\n    EntityManager.prototype.removeAssemblage = function (id) {\n        delete this.assemblages[id];\n        return this;\n    };\n\n    /**\n     * Create a new entity in the system by creating a new instance of each of\n     * its components and setting their initial state, using an assemblage.\n     *\n     * @param {string} assemblageId - Id of the assemblage to create the entity from.\n     * @return {int} - Unique identifier of the new entity.\n     */\n    EntityManager.prototype.createEntityFromAssemblage = function (assemblageId) {\n        if (!(assemblageId in this.assemblages)) {\n            throw new Error('Trying to use unknown assemblage: ' + assemblageId);\n        }\n\n        var assemblage = this.assemblages[assemblageId];\n        var entity = this.createEntity(assemblage.components);\n\n        for (var comp in assemblage.initialState) {\n            if (assemblage.initialState.hasOwnProperty(comp)) {\n                var newState = assemblage.initialState[comp];\n                this.updateComponentDataForEntity(comp, entity, newState);\n            }\n        }\n\n        return entity;\n    };\n\n    //=========================================================================\n    // PROCESSORS\n\n    /**\n     * Add a processor to the list of known processors.\n     *\n     * @param {object} processor - An instance of a processor to manage.\n     * @return {object} - this\n     */\n    EntityManager.prototype.addProcessor = function (processor) {\n        this.processors.push(processor);\n        return this;\n    };\n\n    /**\n     * Remove a processor from the list of known processors.\n     *\n     * @param {object} processor - An instance of a processor to remove.\n     * @return {object} - this\n     */\n    EntityManager.prototype.removeProcessor = function (processor) {\n        this.processors.splice(this.processors.indexOf(processor), 1);\n        return this;\n    };\n\n    /**\n     * Update all the known processors.\n     *\n     * @param {int} dt - The time delta since the last call to update. Will be passed as an argument to all processor's `update` method.\n     * @return {object} - this\n     */\n    EntityManager.prototype.update = function (dt) {\n        for (var i = 0; i < this.processors.length; i++) {\n            this.processors[i].update(dt);\n        }\n        return this;\n    };\n\n    return EntityManager;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ensy/entity-manager.js\n ** module id = 1\n ** module chunks = 0\n **/","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/events/events.js\n ** module id = 2\n ** module chunks = 0\n **/","function createActions(network) {\n    function action(data) {\n        network.emit('action', data)\n    }\n\n    return {\n        createGame: function () {\n            action({\n                type: 'createGame',\n            });\n        },\n        joinGame: function (game) {\n            action({\n                type: 'joinGame',\n                game,\n            });\n        },\n    };\n}\n\nexport default createActions;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/actions.js\n **/","import EventEmitter from 'events';\n\n\nclass Engine extends EventEmitter {\n    constructor(emitter, network) {\n        super();\n\n        this.emitter = emitter;\n        this.network = network;\n\n        this.games = [];\n\n        this._setEventListeners();\n    }\n\n    _setEventListeners() {\n        this.emitter.on('connection', () => {\n            this.network.emit('request', { type: 'modules' });\n            this.network.emit('request', { type: 'games' });\n            this.emitter.emit('ready');\n        });\n\n        this.emitter.on('data', (data) => {\n            console.log('received data');\n            console.log(data);\n            switch (data.type) {\n                case 'modules':\n                    console.log('Modules list received');\n                    this.loadModules(data.data);\n                    break;\n                case 'games':\n                    console.log('Games list received');\n                    this.games = data.data;\n                    break;\n            }\n        });\n\n        this.emitter.on('gameJoined', (data) => {\n            console.log('Game joined!');\n        });\n    }\n\n    loadModules(modules) {\n        modules.forEach(module => {\n            // download the module's files\n            //require()\n        })\n    }\n}\n\nexport default Engine;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/engine.js\n **/","class Network {\n    constructor(listener) {\n        this.listener = listener;\n\n        var socket = io();\n\n        socket.on('connect_failed', function () {\n            console.log('ERROR - Connection to the server failed');\n        });\n        socket.on('connect', this.onConnect.bind(this));\n        socket.on('disconnect', this.onDisconnect.bind(this));\n\n        socket.on('data', this.onData.bind(this));\n        socket.on('gameJoined', this.onGameJoined.bind(this));\n\n        this._socket = socket;\n    }\n\n    emit(type, data) {\n        data = JSON.stringify(data);\n        this._socket.emit(type, data);\n    }\n\n    onConnect() {\n        console.log('Connected to the server');\n        this.listener.emit('connection');\n    }\n\n    onData(data) {\n        console.log('Received data');\n        this.listener.emit('data', JSON.parse(data));\n    }\n\n    onGameJoined(data) {\n        console.log('Received gameJoined');\n        this.listener.emit('gameJoined', JSON.parse(data));\n    }\n\n    onDisconnect() {\n        console.log('Disconnected from the server');\n        this.listener.emit('disconnection');\n    }\n}\n\nexport default Network;\n\n\n\n/** WEBPACK FOOTER **\n ** ./lib/network.js\n **/"],"sourceRoot":""}